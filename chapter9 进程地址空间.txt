内核获取地址空间：连续页框 -__get_free_pages()或alloc__pages()
                slab块-kmem_cache_alloc()或kmalloc()
                非连续内存区-vmalloc或vmalloc__32()
用户态进程分配内存的特点：1.尽量推迟分配，不会马上分配；2.内核随时准备捕获错误。
因此内核态程序比用户态的优势也体现在动态内存分配上。
用户获得的线性地址空间又叫“线性区”。


进程的地址空间


在以下几种情况下，进程获得线性区：
1.shell下输入命令创建新的进程。
2.正在运行的进程装入一个不同的程序（exec函数）。此时，之前所有分配的线性区被释放，装入新的线性区。
3.对文件进行“内存映射”。
4.向用户堆栈增加数据，直到堆栈线性区用完。
5.IPC共享线性区。
6.malloc()函数创建堆。

创建、删除相关的系统调用：
brk（）-改变堆大小
_exit()结束当前进程并撤销地址空间。
fork()创建新进程和新地址空间。
execve（）-装入新可执行文件
mmap(),mmap2()-为文件创建一个内存映射
mremap()-扩大或缩小线性区
remap_file_pages()-为文件创建非线性映射
munmap()--撤销对文件的内存映射，从而缩小进程的地址空间
shmat()-创建一个共享线性区
shmdt()-撤销一个共享线性区


内存描述符


	进程内存描述符mm_struct，每个进程描述符包括2个内存描述符字段mm和active_mm.
	所有的mm_struct存放在一个双向链表中（sturct所有的mm_struct存放在一个双向链表中（sturct list_head mmlist），链表中的第一个元素是init_mm的mmlist字段，init_mm是初始化进程0的内存描述符。
	mm_alloc()用来获得一个新的内存描述符，这些描述符保存在slab高速缓存中。
	

线性区
	通过类型vm_area_struct实现线性区。线性区对象的字段：vm_start表示第一个线性地址；vm_end表示线性区的结束地址。线性区通过链表链接到一起。内核通过进程描述符的mmap字段寻找线性区，mmap
指向链表中第一个线性区描述符。
	线性区太多时，通过链表查找会非常低效。这是通过一种红黑树的结构来查找，红黑树满足4条规则：1.每个节点必须或为黑或为红；2.根必须为黑;3.红节点的孩子必须为黑；4.从一个节点到后代叶子节点
的每个路径包括数量相同的黑节点。红黑树的首部由内存描述符的mm_rb字段指向。红黑树节点的数据结构包括以下3个：
	unsigned long  __rb_parent_color;
	struct rb_node *rb_right;
	struct rb_node *rb_left;

	与也相关的标志：1.在页表项中，由x86硬件使用，Read/Write,Present,User/Supervisor等；2.在页描述符flags字段中，由Linux使用；3.在线性区描述字段的vm_flags字段中。提供线性区全部页的信息，
比如包含什么内容、权限（VM_READ、VM_WRITE、VM_EXEC）、及该怎样增长（VM_GROWUP、VM_GROWDOWN）。
	find_vma()-查找给定地址的最邻近区：find_vma();
	           输入参数：mm-进程内存描述符地址，addr-目的线性地址
			   返回：vm_end字段大于addr的第一个线性区的地址（线性区不一定包含addr）。未找到则返回NULL。
			   流程：先查找mmap_cache,再在红-黑树中查找。
	find_vma_intersection()-查找与一个给定地址重叠的第一个线性区：
	           输入参数：mm-进程内存描述符地址，start_addr,end_addr-指向这个区间
			   返回：找到就返回第一个线性区的地址。未找到则返回NULL。
			   流程：先调用find_vma,再比较end_addr。			   
	get_ummapped_area()-查找一个空闲的地址空间：
	           输入参数：len-指定区间的长度，addr(非空)-从哪个地址开始查找
			   返回：找到就返回新区间的地址。未找到则返回-ENOMEM。
			   流程：1.检查addr是否与用户页边界对齐arch_mmap_check(addr, len, flags)。
					 2.根据线性区间用于文件内存映射还是匿名映射调分别调用文件操作符或内存操作符的get_ummapped_area方法。
					 3.找到未使用的线性地址空间。
	insert_vm_struct()-向内存描述符链表中插入一个线性区：

	do_mmap()-为当前进程创建并初始化一个新的线性区。如满足条件，将新线性区与已有其他线性区合并。
	           输入参数：file和offset-对文件映射有效，其他时候为NULL;addr-从哪个地址开始查找;len-线性区长度；prot-页访问权限；flag-其他标志
			   返回：成功就返回新区间的地址。
			   流程：1.对offset做初步检查，然后根据是文件还是匿名映射调用不同函数。
					 2.调用get_ummapped_area()获得线性地址空间。
					 3.根据prot和flags进行检查和操作。
					 4.确定是否进行合并。如果不合并就用slab分配vm_area_struct并初始化，然后插入到链表及红黑树中。
					 5.用follow_page()检查新的线性地址是否映射到物理页中,如果未映射则调用handle_mm_fault()分配页框并设置页表项。
					 
	do_munmap()-从当前进程地址空间删除一个线性地址区间，要删除的区间不总是对应一个线性区，可能是线性区的一部分，也可能跨越多个线性区。
	           输入参数：mm-进程内存描述符地址;start-起始地址;len-线性区长度；
			   返回：成功返回0。
			   流程：1.扫描线性区列表，将包含在区间内的所有线性区解除链接，根据需要调用split_vma()分割已有线性区。
					 2.更新进程地址页表，并删除定位到的线性区，中间要用到unmap_region().
	split_vma()-把与线性地址区间交叉的线性区分成2个区。一个在线性地址区间外部，一个在内部。
	           输入参数：mm-进程内存描述符地址;vma-线性区描述符指针;addr-区间与线性区交叉点的地址；new_below-交叉点在区间起始处还是结束处的标志。
			   返回：成功返回0。失败则返回-ENOMEM。
			   流程：获得新线性区描述符vm_area_struct。根据标志切分线性区，然后将新线性区描述符更新到链表及红黑树中。
	unmap_region()-遍历线性区链表并释放页框。
	           输入参数：mm-进程内存描述符地址;vma-第一个被删除线性区描述符指针;prev-vma前面线性区描述符指针。
			   返回：
			   流程：调用lru_add_drain()。调用tlb_gather_mmu()初始化每CPU变量mmu_gathers.mmu_gathers 存放成功更新进程页表项的所有信息。回收页表，刷新TLB，释放页框。
			   struct mmu_gather {
				struct mm_struct	*mm;
				unsigned long		start;
				unsigned long		end;
				unsigned int		fullmm : 1;
				unsigned int		need_flush_all : 1;
				unsigned int		freed_tables : 1;
				unsigned int		cleared_ptes : 1;
				unsigned int		cleared_pmds : 1;
				unsigned int		cleared_puds : 1;
				unsigned int		cleared_p4ds : 1;
				unsigned int		vma_exec : 1;
				unsigned int		vma_huge : 1;
				unsigned int		batch_count;
				};
				
				
缺页异常处理程序


	处理缺页异常处理程序必须区分2种情况：1.编程引起的错误；2.属于进程地址空间但尚未分配物理地址引起的异常。
	处理缺页异常主要由 do_page_fault()函数执行,主要接收以下参数：regs-pt_regs结构的地址，包含异常发生时CPU的寄存器的值。
	                                                            error_code-3bit。bit0：0，由访问一个不存在的页引起（页表项中的Present清0）；1，无效访问权限
																                 bit1：0，读访问或执行访问引起；1，写访问
																				 bit2：0，内核态；1，用户态
	缺页处理程序流程详见书中9-5。
	
	如果引起缺页的地址不属于进程的空间：错误发生在用户态(error_code bit2置1)，那么内核会向进程发送SIGSEGV信号。
										错误发生在内核态(error_code bit2置0)：因为某个线性地址作为参数传递给系统调用，那么内核会向进程发送SIGSEGV信号。
																			  因为一个真实的内核缺陷，会把CPU寄存器和内核态堆栈转储打印到控制台，调用
																			  do_exit()杀死进程。“kernel oops”错误。

	如果引起缺页的地址属于进程的空间：会根据error_code的bit1 bit0判断权限是否匹配，不匹配则转向bad_area作为错误处理。匹配则调用 handle_mm_fault()分配新页框。
	handle_mm_fault()-分配一个新的页框。
	           输入参数：mm-异常发生时运行进程内存描述符地址;vma-引起缺页的线性地址所在线性区描述符;address-引起缺页的线性地址；
						 write_access-试图写，则置为1.
			   返回：VM-FAULT-MINOR-成功返回,未阻塞进程
					 VM-FAULT-MAJOR-成功返回,阻塞进程
					 VM-FAULT-OOM-没有足够的内存，不分配新的页框，通常会杀死当前进程
					 VM-FAULT-STGBOS-其他任何错误
					 VM-FAULT-SIGBUS-成功返回,阻塞进程
			   流程：1.检查相应的页表和页目录是否存在，不存在则分配页目录和页表
					 2.调用handle_pte_fault()检查页表项.决定怎么分配新页框：如果访问页不存在，分配新页框并初始化。请求调页。
                                                                            如果存在且标记为只读，那么内核分配一个新页框，把旧页框的数据拷贝至新页框。写时复制。		
								
	请求调页把页框的分配推迟到不能再推迟为止。这是因为进程运行时并不访问其地址空间中的全部地址。
	优点是增加了空闲页框数，缺点是系统处理额外的开销。
	
	fork()系统调用时，如果原样复制父进程整个地址空间到子进程会非常耗时，这是因为：
	1.要为子进程的页表和页分配空间；2.初始化页表；3.父进程数据复制到子进程中。
	UNIX内核都采取写时复制技术。父子进程共享页框。当任何进程试图写一个共享的页框时，会产生一个异常，内核把这个页复制到新的页框中并标记为可写。此时原来页框仍然
写保护，当进程试图写原页框时，会检查这个进程是否是原页框的唯一属主，是则标记为可写。

	一旦初始化结束，任何进程和内核线程就不再直接使用主页内核表。
	内核态进程对非连续内存区的第一次访问会遇到空页表项并产生一个缺页。这时do_page_fault()检查相应的 主内核页表项 ，把CR3中的进程页全局目录地址赋给变量 pgd_paddr,
把pgd_paddr	的线性地址赋给pgd，主内核页全局目录线性地址赋给pgd_k。
	如果产生缺页的线性地址对应的主内核页全局目录项为空，跳转到 no_context 。不为空，则检查主内核页上级目录和主内核页中级目录，其中一个为空，跳转到 no_context 。
都不为空，就把主目录项复制到进程页中间目录项中。


创建和删除进程的地址空间


	创建一个新进程时调用 copy_mm()函数 。通过建立新进程的所有页表和内存描述符来创建新进程的地址空间。
	如果通过 copy_mm()函数创建了新进程，且flag参数CLONE_VM标志被设置，则 copy_mm函数吧父进程地址空间给子进程。
	
	进程结束时，内核调用exit_mm()函数释放进程的地址空间。
	
	
堆的管理


	每个Unix进程都拥有一个特殊的线性区，这就是堆。堆用于满足进程的动态内存需求。内存描述符的start_brk、brk字段限定了这个区的起始和结束。
	进程使用以下API来请求和释放：
	malloc(size),calloc(n,size)-请求含有n个大小为size的数组，realloc(ptr,size)-改变内存区字段大小；
	free(addr)-释放内存区
	brk(size)-直接修改堆的大小
	sbrk(incr)
	brk()函数以系统调用的方式实现，其他函数是通过brk()和mmap()系统调用实现的库函数
