#中断和异常


	同步中断：指令执行时由CPU控制单元产生。只有一条指令终止执行时才会发出中断。-异常
	异步中断：其他硬件设备依照CPU时钟随机产生。-中断
	
	中断是由间隔定时器或I/O设备产生。	异常由a)程序错误；b)内核必须处理的异常条件 产生。
	
##中断信号的作用

	中断信号到达时，要在 内核态堆栈 保存程序计数器的当前值（CS\EIP的内容），并把和中断类型相关的一个地址放入程序计数器。	
	中断处理和进程切换的差异：中断或异常处理程序执行的代码不是一个进程，而是一个 内核控制路径 。 代表 中断发生时正在执行的 进程 执行 。
它比进程要“轻”，中断上下文很少。

	中断处理必须满足以下约束：
	1.尽可能快处理完，其他向后推迟。因此处理分为2部：紧急而关键的部分，马上执行；推迟部分，随后执行。
	2.中断处理程序必须编写成能使内核控制路径嵌套执行的形式。最后一个内核控制路径终止时，a)内核能恢复被中断进程的执行。b)中断信号导致
重新调度(比如定时中断)，切换到另外的进程。
	3.尽可能限制特定的临界区-在这些临界区中，中断被禁止。中断处理程序，或者说内核路径要大部分以开中断的形式执行。
	
##中断和异常

	中断：1)可屏蔽中断：I/O设备发出的所有中断都是可屏蔽的。
		  2)非屏蔽中断：危急事件引起。
	异常：1)故障fault：通常可以纠正。纠正后程序可以在不失连贯性的情况下重新开始。当异常处理程序终止时，引起故障的指令会重新执行。
		  2)陷阱trap：和故障类似。内核把控制权返回给程序后可以继续执行不失连贯性。不同的是，返回后执行的是引发陷阱指令的下一条指令。
	一般用于调试程序。
		  3)异常终止abort：严重错误。不能再寄存器中保存引起异常的指令地址。异常终止程序除了强制受影响的进程终止外，别无选择。
		  4）编程异常：编程者发出请求时发生。由a)INT或INT3指令触发;b)into(检查溢出)或bound(检查地址出界)指令检查条件不为真时触发。
	控制单元把编程异常作为 陷阱 来处理。编程异常通常叫做 软中断 。用途：a)执行系统调用；b)给调试程序通报一个特定的事件。
	
	非屏蔽中断和异常的向量是固定的，其他的可以通过对中断控制器的编程实现。
	
###IRQ和中断

	每个能够发出中断请求的硬件设备控制器都有一条名为IRQ的输出线。所有现有IRQ线都与可编程中断控制器的硬件电路的输入引脚相连。
	中断控制器执行以下动作：1)监视IRQ线。由2条以上IRQ产生信号，选择引脚编号较小的。
							2)当IRQ信号出现时：a)将引发信号转换成对应的向量；
											   b)将向量放在中断控制器I/O端口，允许CPU通过数据总线读。
											   c)将引发信号送到处理器INTR引脚，引发中断。
											   d)等待CPU确认中断。确认后，清INTR线。
	当eflags的IF标志被清0时，每个可屏蔽中断都由CPU暂时忽略。

###异常

	内核必须为每种异常提供一个专门的异常处理程序。CPU控制单元在开始执行异常处理程序前会产生一个硬件出错码，并压入 内核态堆栈。
通常会把一个UNIX信号发送到引起异常的进程。0-19号异常如下所示，20-31号异常留作未来使用。
	
编号     异常               异常处理程序
0,   divide error,          divide_error()
1,   debug,					debug() 
2,   nmi,					nmi()
3,   breakpoint,			int3()
4,   overflow,				overflow()
5,   bounds check,			bounds()
6,   invalid opcode,		invalid_op()
7,   device not available,	device_not_available()
8,   double fault,			double_fault_fn()
9,   coprocessor segment    coprocessor_segment_overrun()
	 overrun,
10,  Invalid TSS,			invalid_tss()
11,  segment not present,	segment_not_present()
12,  stack exception,		stack_segment()
13,  general protection,	general_protection()
14,  page fault,			page_fault()
15,  intel reserved,		None
16,  floating point error,	coprocessor_error()
17,  alignment check,		alignment_check()
18,  machine check,			machine_check()
19,  simd floating point,	simd_coprocessor_check()

###中断描述符表

	内核 在允许中断发生前，必须适当地 初始化IDT。表中每一项对应一个中断或异常向量。每个向量由8个字节组成，最多需要256*8=2048字节。	
	idtr寄存器 是IDT能够存放在内存的 任何位置。它指定IDT的 线性基地址 及 限制(最大长度)。LIDT汇编指令用于初始化IDTR.
	中断描述符表包括3种类型描述符：1)任务门：中断信号发生时，必须取代当前进程的那个进程的TSS选择符存放在任务门中。
								   2)中断门:包括段选择符和中断、异常处理程序的段内偏移量。当控制权转移到一个适当(?什么是适当)
											的段时，处理器清IF标志，关闭未来可能发生的可屏蔽中断。
								   3)陷阱门：和中断门类似，只是不清IF标志。
								   
	Linux 用中断门处理中断，用陷阱门处理异常。（double fault是唯一用任务门处理的异常）
	
###中断和异常的硬件处理

	执行一条指令后，CS EIP这一对寄存器包含下一条要执行的指令的 逻辑地址。 在处理那条指令前，控制单元会检查运行前一条指令时是否已经
发生了一个中断或异常。如发生，执行以下操作：
	1.确定中断或异常向量i。
	2.读idtr寄存器指向的IDT表中第i项。
	3.在GDT中查找，以读取IDT表中选择符标识的 段 描述符。
	4.确信中断是由授权的源产生的。首先将当前特权级CPL(CS中)与DPL(段描述符)对比。CPL>=DPL。If CPL<DPL THEN throw general_protection.
	如果是编程错误，则要保证CPL<=DPL。If CPL>DPL THEN throw general_protection.
	5.如果CPL和DPL不同，控制单元必须使用与新特权级相关的栈，则：a.读取tr寄存器，访问运行进程的TSS段。
																b.用TSS段中的值装载SS和ESP寄存器。
																c.在新栈中保存旧的ESP和SS的值。
	6.如果发生的是故障，则会重新执行引起故障那条指令。
	7.栈中保存CS、eflags、eip的内容。
	8.如果产生了硬件出错码，则推入栈中。
	9.根据之前idt的内容执行处理程序第一条指令（装载CS和EIP）。
	
	中断处理程序完成后，相应程序必须产生一条iret指令，把控制权交给被中断的进程。过程如下:
	1.用栈中的值装载CS、eflags、eip的内容。也就是引起中断异常的进程的上下文。
	2.IF CPL==DPL THEN 终止执行iret。else goto step3.
	3.从栈中装载SS和ESP。
	4.检查DS\ES\FS\GS。IF DPL<CPL then clear 段寄存器。
	
###中断和异常处理程序的嵌套处理

	每个中断和异常都会引起一个内核控制路径，或者说代表当前进程在内核态执行单独的指令序列。
	一个中断处理程序可以被另一个中断处理程序“中断”，引起内核控制路径的嵌套执行。如果嵌套深度大于1，这些指令将执行上次被打断的内核控制路径，
此时CPU仍处于内核态。
	允许内核控制路径嵌套执行的代价是中断处理程序永不阻塞，即中断处理程序运行期间不能发生进程切换。嵌套的内核控制路径执行时所需要的数据都存放
在当前进程的内核态堆栈中。
	加入没有bug，大多数异常就只发生在CPU处于用户态时。加入内核没有bug，大多数异常是处于用户态是发生。异常要么是编程错误，要么是程序主动触发。
然而，缺页异常可以发生在内核态。当处理时，内核可以挂起当前进程，用另一个进程替代，直到请求的页可以使用为止。只要被挂起的进程又获得处理器，处理
缺页异常的内核控制路径就能恢复。
	因为缺页异常处理程序不进一步引起异常，因此与异常相关至多有个控制路径堆叠在一起（第一个由 系统调用 引起，第二个由 缺页 引起）。
	与异常形成对照的是，尽管处理中断的内核控制路径代表当前进程运行。但I/O设备产生的中断并不引用当前进程的专用数据结构。事实上，当一个给定中断
发生时，要预测那个进程将会运行时不可能发生的。
	中断可以抢占中断和异常。异常不能抢占中断。
	内核态能触发的唯一异常是缺页异常（我能想到的是因为系统调用带入了缺页的线性地址引起）。中断处理程序从不执行导致缺页的操作。
	缺页意味着进程切换。
	linux交错执行内核控制路径的原因：1.提高中断控制器和设备控制器的吞吐量；2.实现没有优先级的中断模型。
	多处理器系统上，几个内核控制路径可以并发执行。与异常相关的内核控制路径可以在一个CPU上执行，由于进程切换在另一个CPU上执行。

##初始化中断描述符表
	系统初始化时，把IDT表的初始地址装到idtr寄存器，并初始化表中每一项。
	大多数情况下，因为安全因素，DPL、CPL的值设置成0来防止进程发出中断信号。少数情况下，用户态进程可以发出一个编程异常，此时DPL设置成3，和CPL同。
	
###中断门、陷阱门及系统门
	Linux分类与x86略有不同：
	中断门：用户态不能访问的Intel中断门(DPL0)。所有Linux中断处理程序都通过中断门激活，并限制在内核态。
	系统门：用户态可访问（DPL3）的Intel陷阱门。通过系统门激活的3个Linux异常处理程序向量---4(into),5(bound)及128(int $80，系统调用)。
	系统中断门：能够被用户态进程访问的Intel中断门(DPL = 3)。用户态可以使用汇编语言指令 Int 3（向量3）。
	陷阱门：用户态不能访问的陷阱门(门的DPL字段为0)。大部分Linux异常处理程序通过陷阱门激活。
	任务门：不能被用户态进程访问的任务门。“Double fault”激活。
	
	下列函数与体系结构相关，可以用来在IDT中插入门：
	set_intr_gate(n,addr)
	在IDAT的第n个表项插入一个中断门。门中的段选择符设置为内核代码的端选择符，偏移量为中断处理程序地址addr,DPL=0。
	set_system_gate(n,addr)
	在IDAT的第n个表项插入一个陷阱门。门中的段选择符设置为内核代码的端选择符，偏移量为中断处理程序地址addr,DPL=3。
	set_system_intr_gate(n,addr)
	在IDAT的第n个表项插入一个中断门。门中的段选择符设置为内核代码的端选择符，偏移量为中断处理程序地址addr,DPL=3。
	set_trap_gate(n,addr)
	在IDAT的第n个表项插入一个中断门。门中的段选择符设置为内核代码的端选择符，偏移量为中断处理程序地址addr,DPL=0。
	set_task_gate(n,addr)
	在IDAT的第n个表项插入一个中断门。门中的段选择符存放一个TSS的全局描述符表指针，该TSS包含要激活的函数，偏移量为0,DPL=3。
	
###IDT的初步初始化
	IDT经过了2次初始化：一次是实模式下由BIOS例程初始化；另一次是linux初始化过程中完成的，完全没用到BIOS例程，全部重新初始化。
	setup_idt()汇编语言函数用同一个中断门(即指向 ignore_int() 中断处理程序)来填充所有256个 idt_table表项。
	setup_idt()处理程序应该从不被执行，在控制台或日志文件中出现的“Unknown Interrupt”消息要么是出现一个硬件问题(没有预料到的中断)，要么是一个
内核问题(一个中断或异常未被适当的处理)。
	紧接着这个预初始化，内核将在IDT进行第二遍初始化，拥有意义的陷阱和中断处理程序替代空处理程序。
	
##异常处理
	如果一个异常执行了一个被0除的操作，CPU产生一个“Divide error”异常，并由相应的异常处理程序向当前进程发送一个SIGFPE信号，进程采取表要步骤恢复
或中止运行。
	CPU产生的大部分异常由Linux解释为出错条件。但有两种情况，Linux利用CPU异常更有效第管理硬件资源。1.“Device not available”异常与CR0寄存器的TS标志
用来把新值装入浮点寄存器。2."Page fault"异常用来分配新页框。
	异常处理程序标准结构：1.内核堆栈保存大多数寄存器的内容；2.用高级c函数处理异常；3.通过 ret_grom_exception() 函数从异常处理程序退出。
	对IDT初始化使用 trap_init()函数（在 init/main.c中）。trap_init将异常处理函数插入到idt的非屏蔽中断及异常表项中：
	处理器在自己的私有栈上处理“double fault”，因为无法确定esp值是否正确，只能用GDT表第32项中的TSS段中值装载EIP和ESP。
	
	
###为异常处理保存寄存器的值
	一个典型的异常处理程序开始是这样的：
	handler_name:
		pushl $0
		pushl $do_handler_name
		jmp error_code
	如果异常发生时，如果没有自动把一个硬件出错码插入栈中，相应汇编语言片段会包含一条 push $0 ,垫上一个空置。然后把以 do_ 开头的c语言函数压进栈中。
	
	标号为 error_code 的汇编语言片段对所有异常处理程序是相同的，除了“Device not available” . 这段代码执行以下步骤：
	1.把高级C函数可能用到的寄存器保存在栈中。
	2.产生一条cld指令来清 eflags 的方向标志DF，以确保调用字符串指令时会自动增加edi和esi寄存器的值。
	3.把栈中位于 esp+36 位置的硬件出错码(对应 pushl $0 的位置) ->edx。然后在 esp+36 位置写 -1，这个值用来把0x80 异常与其他异常隔离开。
	4.把 esp+32 位置的 do_handler_name() 高级C函数地址 -> edi ,然后在 esp+32 位置写 es的值。
	5.把栈顶 $ESP -> EAX。这个单元保存的是 第一步保存的最后一个寄存器的值。
	6.把用户数据段的选择符拷贝到ds和es寄存器中。
	7.调用edi中的c函数。
	
###进入和离开异常处理程序
	
	异常处理程序do_[函数名]的重要操作：1.保存 (频率:大部分)硬件出错码和向量：current->thread.error_code = error_code	;current->thread.trap_no = vector
										 2.信号  force_sig(sig_number,current)
													----信号处理后续处理两种方式：1)用户态进程自己处理程序；2)内核处理，一般杀死进程。
										 3.检查 (频率：总是)异常发生在用户态or内核态：
										   发生在内核态->是否由系统调用无效参数引起->1)Y,第10章 “动态地址检查，修正代码”；
																					 2)N,内核bug，处理方式：
																						a)die函数()-防止硬盘数据崩溃，打印 all regs(kernel oops)
																						b)do_exit()终止当前进程。->详见C3 “进程终止”
										 4.结束，执行jmp 跳转到 ret_from_exception()。
	
##中断处理

	处理过程不同点:大部分异常处理 发送信号 就能完成，行动可以被延迟。
	分类：1.I/O中断；2.时钟中断：大部分作为I/O中断处理；3处理器间中断。
	
###I/O中断处理

	灵活性实现方式：1.IRQ共享：一次触发，执行多个ISR。每个ISR执行时验证设备是否需要关注。
					2.IRQ动态分配：一条IRQ线最后时刻才与设备驱动关联。
	中断操作分类必要性：不是所有操作都有急迫性,需要尽快处理完，因为：
							--中断处理正在运行，相应IRQ线信号被暂时忽略
							--中断处理程序代表进程(TASK_RUNNING)执行，否则会系统僵死。
	中断处理程序不能执行任何阻塞过程。
	Linux把要执行的操作分为3类：1.Critical:立即执行，禁止可屏蔽中断；
								2.Noncritical：立即执行，开可屏蔽中断；
								3.非紧急可延迟：软中断和tasklet
	基本操作过程：1.保存 IRQ值和寄存器 in 内核态堆栈；
				  2.应答 中断控制器，允许进一步发出中断；
				  3.执行 ISR;
				  4.终止 ret_from_intr().	
				  
####中断向量
	物理IRQ号<-->中断向量32-238(除128系统调用)
	中断向量表：
	向量范围			用途
	0-19				非屏蔽中断和异常
	20-31				Intel 保留
	32-238(除128)		外部中断
	128					系统调用
	239					本地时钟APIC
	240					本地高温PIC
	241-250				Linux 保留
	251-253				处理器间中断
	254					本地APIC错误中断
	255					本地APIC伪中断
	物理IRQ号<-->中断向量建立时机：初始化设备驱动程序时。
	
###IRQ数据结构
	irq_desc数组
		->irq_desc_t描述符(每中断向量)
			->handler 指向PIC对象
			->handler_data
			->action 标识ISR,指向irqaction描述符链表第一个元素
			->status
			->depth 0，激活；正数,被禁止不止一次
			->irq_count 用于诊断
			->irqs_unhandled 用于诊断
			->lock 串行访问IRQ描述符合PIC的自旋锁
	IRQ线标志：
		INPROGRESS	一个处理程序正在执行
		DISABLED	设备驱动程序故意禁用IRQ线
		PENDING		一个IRQ已经出现在线上，页对PIC作了应答，内核还未提供服务
		REPLAY		已禁用，但前一个出现的IRQ未应答
		AUTODETECT	探测硬件时使用IRQ
		WAITING		探测硬件时使用IRQ,相应中断未产生
	irqaction描述符：
		handler		指向ISR
		flags		
		mask		未使用
		name		设备名
		dev_id		私有字段，可能等于主设备、此设备号
		next		irqaction描述符链表下一个元素
		irq			irq线
		dir			和IRQn相关 /proc/irq/n 目录描述符
	irqaction描述符标志：
	SA_INTERRUPT		处理程序必须以禁止中断执行
	SA_SHIRQ			IRQ线与其他设备共享
	SA_SAMPLE_RANDOM	时间随机的发生源，可以用作随机数发生器

####IRQ在多处理器系统上的分发
	原则：以轮转方式在CPU间分发，所有CPU服务中断的执行时间大致相同。
####多种类型的内核栈
	sizeof(thread_union)==8Kb :所有类型的内核控制路径(中断、异常、可延迟函数)都使用 当前进程的内核栈。
	sizeof(thread_union)==4Kb :1.异常栈，使用当前进程的内核栈；
							   2.硬中断请求栈：每个CPU都有一个硬中断请求栈，占一个页框；
							   3.软中断请求栈：每个CPU都有一个软中断请求栈，占一个页框；
####为中断处理程序保存寄存器的值
	pushl $n-256			//中断号-256保存到栈上，负数表示所有中断，正数表示系统调用
	jmp common_interrupt
	
	common_interrupt:
		SAVE_ALL
		movl %esp,%eax	//do_IRQ函数会从eax中找到参数regs的值
		call do_IRQ
		jmp ret_from_intr
		
	SAVE_ALL宏：
		cld
		push %es
		...(push了ds、eax、ebp、edi、esi、edx、ecx、ebx)//未保存eflags,cs,eip,ss,esp.因为已被硬件保存
														//实际还少了fs和gs这2个数据段
		movl $__USER_DS %edx
		movl $edx,%ds	//用户数据段装入ds,es
		movl %edx,%es
####do_IRQ()函数
	__attribute__((regparm(3))) unsigned int do_IRQ(struct pt_regs *regs)
	1.preempt_count++    //增加嵌套计数，by irq_enter()
	2.If sizeof(thread_union) == 4kb; then 切换到硬中断强求栈。
	3.__do_IRQ()函数；输入指针 regs 和 regs->orig_eax 中的中断号。
	4.恢复第二部操作内容。
	5.-irq_exit()//递减中断计数器
	  -检查是否由可中断函数等待执行。
	6.ret_from_intr()
	
###__do_IRQ()函数
	1.自旋锁：spinlock(&(irq_desc[irq].lock))，防止中断再次出发后在另一CPU访问共享数据。
	2.应答PIC：irq_desc[irq].handler->ack(irq),应答PIC,应答后PIC开中断，本地CPU不进一步接受这条线中断。
												其他CPU还是可以收到中断，因为PIC独立，所以要加锁。
	3.设置status。根据函数所处状态设置。
	4.检查 标志位和处理函数：if(!(status&(IRQ_DISABLED|IRQ_INPROGRESS))&&action)
								只要不是DISABLED或INPROGRESS状态，且处理函数不为NULL,就准备执行ISR
	5.释放 自旋锁，这样其他CPU可以设置pending状态。
	6.执行ISR ,handle_IRQ_event();
	7.又获取 自选锁，这样可以等待其他CPU设置新中断的PENDING。
	8.检查 是否由新的pending，是，则循环再处理中断。
	9.结束，解锁。irq_desc[irq].handler->end(irq).

####挽救丢失的中断
	CPU0有一条激活的中断线，且准备处理，但在应答前该IRQ被CPU1屏蔽。此时CPU0应答了中断，但不会执行ISR.
	解决问题：内核激活IRQ线的enable_irq()函数检查是否发生了中断丢失，如发生，则强迫硬件将中断再产生一次。
	
####中断服务例程
	handle_IRQ_event()-输入：irq，dev_id,regs:中断发生后随即在栈中保存字段。
					   返回：1-成功；0-失败
					   一般流程：1.开中断
								 2.执行ISR,如果是共享的，就执行多个ISR.
								 3.关中断
								 4.返回
####IRQ线的动态分配
####处理器间的中断处理
	触发：作为信号直接放在连接所有APIC的总线上的。
	分类：1.CALL_FUNCTION_VECTOR
			发往所有CPU(不包括发送者)，强制CPU运行传递的函数。
		  2.RESCHEDULE_VECTOR
			限定一个接收此中断的CPU执行。从中断返回后，
		  3.INVALIDATE_TLB_VECTOR
			发往所有CPU(不包括发送者)，强制他们的TLB无效，由处理程序刷新这些CPU的某些TLB。
	
	处理函数：call_[分类类型] 函数调用 smp_call_[分类类型]	 函数进行处理。
	产生中断函数：send_IPI_all()
				  send_IPI_allbutself()
				  send_IPI_self()
				  send_IPI_mask()

##软中断及tasklet
	
	通常一个中断的处理程序结束前，不应该再次出现这个中断，而可延迟中断可以在开中断情况下执行。
	Linux通过2种非紧迫、可中断内核函数：1.可延迟函数(软中断和tasklet) ；2.工作队列。
	
	tasklet和软中断：
	1.tasklet通过软中断实现。
	2.软中断分配是静态的，在编译时实现；tasklet的分配和初始化可以在运行时实现，比如安装一个内核模块时。
	3.软中断(同一类型)可以并发的运行在多个CPU上，需要自旋锁保护其数据结构；相同类型的tasklet总是串行地被执行，tasklet函数不一定是
可重入的。

	可延迟函数的4种操作：
	1.初始化-定义一个新的可延迟函数；内核初始化或加载模块时进行。
	2.激活-标记一个可延迟函数为“挂起”，在可延迟函数的下一轮调度中执行。任何时候进行。
	3.屏蔽-即使激活，也不执行。
	4.执行-特定时间进行。
	潜在问题-激活和执行在同一CPU上。可能导致效率问题。
	
###软中断
	Linux2.6中的6种软中断，按优先级高->低：(Linux5.5有10种)
	HI_SOFTIRQ			0	高优先级tasklet			
	TIMER_SOFTIRQ		1	时钟中断相关tasklet
	NET_TX_SOFTIRQ		2	数据包到网卡
	NET_RX_SOFTIRQ		3	网卡接收数据包
	SCSI_SOFTIRQ		4	SCSI命令的后台中断处理
	TASKLET_SOFTIRQ		5	常规tasklet

####软中断使用的数据结构
	softirq_vec 数组：struct softirq_action softirq_vec[NR_SOFTIRQS]，NR_SOFTIRQS=10(Linux5.5)。
	struct softirq_action	{	void	(*action)(struct softirq_action *);	};action指针指向软中断函数。
	
	preempt_count字段：
	bit			名称			描述
	0~7 	 抢占计数器		禁用本地CPU内核抢占的次数,0允许抢占
	8~15	软中断计数器	可延迟函数被禁用的程度，0表示可延迟函数处于激活
	16~27	硬中断计数器	本地CPU上中断处理程序的嵌套数
	28		PREEMPT_ACTIVE
	
	宏in_interrupt()-功能：检查current_thread_info()->preempt_count 的硬中断和软中断计数器。
					 返回：只要一个计数器为0就产生非0值
					 其他：如果使用多内核栈，该宏还要检查本地CPU的irq_ctx联合体中的thread_info()->preempt_count，总是返回非零。
	__softirq_pending-功能：本地cpu软中断位掩码，描述挂起的软中断。
					  位置：存放在irq_cpustat_t 中，每cpu。

####处理软中断
	初始化函数：
	open_softirq()-输入：软中断下标、软中断函数指针，软中断函数使用数据结构指针。
				   功能：初始化softirq_vec数组中适当的指针。
	激活函数：
	raise_softirq()-输入：nr-软中断下标
					操作：1.保存IF，禁用本地int。-local_irq_save
						  2.激活：or_softirq_pending(1UL << nr)。设置对应位为“挂起“，激活=挂起。
						  3.if(in_interrupt() == 1)	//说明中断上下文调用了 raise_softirq(),或禁用了软中断
								local_irq_restore() ；//恢复IF标志
							else 
								wakeup_softirqd();//唤醒本地CPU的ksoftirqd内核线程
								local_irq_restore() ；//恢复IF标志
	检查软中断频率：周期性，又不太频繁。
	在以下几个点检查：1.local_bh_enable();bottom half
					  2.do_IRQ()完成了I/O处理时，或调用irq_exit()宏时。
					  3.smp_apic_timer_interrupt() 函数处理完本地定时中断。
					  4.多处理器上，处理完被CALL_FUNCTION_VECTOR处理器间中断所触发函数时。
					  5.特殊的ksoftirqd/n 内核线程被唤醒时。

####do_softirq()函数

	触发：检查点发现激活软中断。
	流程：
	 1.if(in_interrupt() == 1)	//说明中断上下文调用了 do_softirq(),或禁用了软中断
		return ；//恢复IF标志
	 2.保存IF，禁用本地int。-local_irq_save();
	 3.检查例外情况：如果内核栈是4kb大小，则切换到软中断请求栈而非异常栈。
	 4.执行__do_softirq；
	 5.例外情况返回：如第3步执行，则切换回异常栈。
	 6.恢复IF标志：local_irq_restore()
	
####__do_softirq()函数
	执行软中断函数的数量：执行完每个挂起的软中断数量。
	方式：循环扫描有限次数(10次)的中断掩码。因为随时有可能有新软中断产生，不可能无限扫描下去。
	单次循环流程：

##工作队列

##从中断和异常返回

	返回前，考虑几个问题：
	1.内核控制路径并发执行的数量：如果仅仅有一个，那么CPU必须切换到用户态。
	2.挂起进程的切换请求：如果有任何请求，内核就必须进行进程调度；否则，把控制权还给当前进程。
	3.挂起的信号：如果一个信号发送到当前进程，必须处理。
	4.单步执行的模式：如果调试程序正在跟踪，必须在进程切换到用户态之前恢复单步执行。
	5.virtual-8086模式：如果CPU处于virtual-8086模式。当前进程正在实行原来的实模式程序，必须以特殊方式处理。
	
	描述状态的字段存放在thread_info的flag字段中：
	TIF_SYSCALL_TRACE		正在跟踪系统调用
	TIF_NOTIFY_RESUME		80x86平台上不可用
	TIF_SIGPENDING			进程挂起所有信号
	TIF_NEED_RESCHED		必须执行调度程序
	TIF_SINGLESTEP			临返回用户态前恢复单步执行
	TIF_IRET				通过iret而不是sysexit从系统调用强行返回
	TIF_SYSCALL_AUDIT		系统调用正被审计
	TIF_POLLING_NRFLAG		空闲进程正在轮询TIF_NEED_RESCHED标志
	TIF_MEMDIE				正在撤销进程以回收内存
	
	完成返回所有的工作由2个入口点代码完成 ret_from_intr()和 ret_from_exception().两个的唯一区别是，开启内核抢占
后， ret_from_exception() 禁用本地中断。因为中断返回时，在之前的handle_IRQ_event()中已禁用中断。

###入口点
	内核首先把 thread_info 描述符的地址装入ebp。因为thread_info描述符的地址位于(ESP-8096);然后根据发生中断或异常
时压入栈中的cs和eflags寄存器值确定：a.中断是否发生在用户态？；b.是否设置了VM标志。如果上两种情况满足，跳转到
resume_userspace,否则到resume_kernel处。

###
	如果被恢复的程序运行在内核态，就执行rusume_kernel处的汇编代码。
	通过thread_info判断是否允许内核抢占( preempt_count ==0)，如果允许，就跳到 need_resched 处。否则，将保存的寄存
器弹出，最后iret。

###检查内核抢占
	执行 need_resched 代码时，所有没有执行完的内核路径都不是中断处理程序。否则 preempt_count > 0。
	如果 current->thread->flags字段中的 TIF_NEED_RESCHED 为0.说明没有需要切换的进程。因此跳到restore_all。如果需
要进程切换，就调用 preempt_schedule_irq() 函数，它设置preempt_count的 PREEMPT_ACTIVE 字段。打开本地中断，调用
schedule() 函数选择另外一个进程运行。

###恢复用户态程序
	如果要恢复的程序原来运行在用户态，就跳转到resume_userspace处：
	1.先禁用本地中断。
	2.检测current->thread->flags字段的值：如果只设置了TIF_SYSCALL_TRACE，TIF_SYSCALL_AUDIT或TIF_SIGPENDING，就跳转
到restore_all。否则到 work_pending。

###检测重调度标志
	current->thread->flags字段的值表示在恢复被中断的程序之前，需要额外的工作。如果进程切换请求被挂起，就调用schedule()
选择另外一个程序。前面进程要恢复就跳转到resume_userspace.
###处理挂起信号、虚拟8086模式和单步执行

























	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	 