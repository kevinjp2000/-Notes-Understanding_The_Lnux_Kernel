#进程、轻量级进程和线程
#进程描述符
##进程状态
##标识一个进程
###进程描述符处理
###标识当前进程
###双向链表
###进程链表
###TASK_RUNNING状态的进程链表

##进程间的关系
###pidhash表及链表

##如何组织进程
###等待队列
###等待队列的操作


##进程资源限制

#进程切换
##硬件上下文
##任务状态段
###thread字段
##执行进程切换
###switch_to宏
###__switch_to()函数

##保存和加载FPU,MMX及XMM寄存器
###保存FPU寄存器
###装载FPU寄存器
###在内核态使用FPU,MMX和SSE/SSE2单元


#创建进程
	传统操作：子进程复制父进程所拥有的的资源
	引入问题：传统方法效率低。-多数情况下子进程不适用父进程的资源，会调用execve(),清除父进程拷贝的地址空间。
	现代解决办法(3种机制)：1.写时复制；
						   2.轻量级进程，允许父子进程共享多数数据结构。
						   3.
##clone(),fork及vfork()系统调用
###do_fork()函数
###copy_porcess()函数

##内核线程
###创建一个内核线程
###进程0
###进程1
###其他内核线程


#撤销进程
##进程终止
###do_group_exit()函数
###do_exit()函数

##进程删除