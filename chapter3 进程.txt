#进程、轻量级进程和线程
	父子进程共享程序代码的页，但是拥有各自独立的数据拷贝。
	现代UNIX支持多线程应用程序-拥有很多相对独立执行流的用户程序共享应用程序的大部分数据结构。
	大部分多线程应用程序都是用pthread（POSIX）库的标准函数集编写的。
	两个轻量级进程基本共享一些资源，如地址空间、打开的文件等。
	LWP与线程关联起来。每个线程由内核独立调度。
	在LINUX中，一个线程组基本上是实现了多线程应用的一组轻量级进程。
#进程描述符
	thread_info		进程基本信息
	mm_struct
	tty_struct		与进程相关的tty
	fs_struct		当前目录
	files_struct	指向文件描述符的指针
	signal_struct	
##进程状态
	state字段描述：
		1.TASK_RUNNING
			要么在CPU上执行，要么准备执行
		2.TASK_INTERRUPTIBLE
			硬件中断，等待资源被释放，信号都可以唤醒。
		3.TASK_UNINTERRUPTIBLE
			中断无法唤醒，只有资源释放才可以
		4.TASK_STOPPED
			收到信号暂停
		5.TASK_TRACED
	既存放在state字段又存放在exit_state字段中：
		EXIT_ZOMBIE
			进程被终止，但父进程还没发布wait4()或waitpid()系统调用返回死亡进程信息。内核不能丢弃进程描述符数据。
		EXIT_DEAD
	内核使用 p->state = TASK_RUNNING 或 set_task_state,set_current_state进行设置
##标识一个进程
	pidmap_array 存放 已分配 和闲置的PID号。系统一直保存。
	一个多线程应用程序所有线程拥有相同的PID。
	线程组中所有线程与领头线程(thread group leader)拥有相同的PID。
	getpid()返回的是tgid值。	
	
###进程描述符处理
	union thread_union{
		struct thread_info thread_info;
		unsigned long stack[2048];//32bit系统
	}
###标识当前进程
	current_thread_info()宏获得thread_info结构指针。
	获得当前描述符指针是 current宏 ，等价于 current_thread_info()->task。
###双向链表
	LIST_HEAD(list_name)-创建新链表，声明类型为list_head的新变量。
	list_add(n,p)-n插入在p之后
	list_add_tail(n,p)-n插入到p之前
	list_del(p)-删除p指向元素
	list_empty(p)-检查是否为空
	list_entry(p,t,m)-返回类型为t的数据结构地址，其中t含有list_head字段，而list_head字段中有名字m和地址p
	list_for_each(p,h)-对表头地址h指定的链表进行扫描，每次循环时，通过p返回指向list_head结构的指针
	list_addfor_each_entry(p,h,m)-返回的是包含list_head结构的数据地址
###进程链表
	SET_LINKS-插入一个进程描述符。
	REMOVE_LINKS-删除一个进程描述符。
	for_each_process-扫描整个进程链表。
###TASK_RUNNING状态的进程链表
	每个进程优先级对应一个链表。运行队列链表有140个不同队列。
	prio_array_t结构：
		int nr_active
		unsigned long bitmap //32bit系统,队列不为空时置位
		struct list_head[140]  queue //头结点
	enqueue_task(p,array)将进程描述符插入运行队列链表
		list_add_tail(&p->run_list,&array->queue[p->prio])
		__set_bit(p->prio,array->bitmap)
		array->nr_active++
		p->array = array		
	
##进程间的关系
	进程描述符中的亲属关系字段：
		real_parent:创建了P的进程描述符。如果父进程不再存在，则指向进程1.
		parent:当前父进程。如果子进程终止，必须向父进程发信号。
		children:链表头部。
		sibling:指向兄弟进程链表的下一个或前一个元素的指针。
	进程描述符中的非亲属关系字段：
		group_leader		进程组 的领头进程的描述符指针
		signal->pgrp		进程组 的领头进程的PID
		tgid				线程组 的领头进程的PID
		signal->session		登录回话领头进程的PID
		ptrace_children		包含被debugger程序跟踪的P的子进程
		ptrace_list			指向所跟踪进程实际父进程链表的前一个和下一个元素
		
###pidhash表及链表
	内核必须能从进程的PID导出对应的进程描述符指针。比如kill();
	顺序扫描进程链表的并检查进程描述符的pid可行但低效。因此引入4个散列表：
	HASH表类型			描述符中的字段
	PIDTYPE_PID			pid
	PIDTYPE_TGID		tgid
	PIDTYPE_PGRP		pgrp
	PIDTYPE_SID			session
	
	PID->表索引：pid_hashfn宏。
	hash的计算：(val*0x9e370001UL)>>(32-pidhash_shift)  pidhash_shift是表索引长度。
	表索引共2047个，因此使用双向链表处理冲突的hash。
	
##如何组织进程
	没有专门为TASK_STOPPED、EXIT_ZOMBIE、EXIT_DEAD建立专门的链表。
	
###等待队列
	链表头
	struct __wait_queue_head{
		spinlock lock;
		struct list_head task_list;
		}
	typedef struct __wait_queue_head wait_queue_head_t;
	
	链表中的元素为 wait_queue_t :
	struct __wait_queue{
		unsigned int flags;
		struct task_struct *task;
		wait_queue_func_t func;
		struct list_head task_list;
	}
	如果多个进程互斥等待同一资源释放，那么同时唤醒多个进程就没必要。
	有两种进程，互斥进程（flag=1），非互斥进程（flag=0）
	
###等待队列的操作
	开发者可以通过 init_waitqueue_func_entry()来定义唤醒函数。
	DECLARE_WAIT_QUEUE_HEAD(name)宏第一个新等待队列的头部。
	init_waitqueue_entry初始化动态分配队列的头变量。比如初始化变量q：
		q->flags = 0;
		q->task =p;
		q->func = default_wake_function;

##进程资源限制

#进程切换
##硬件上下文
##任务状态段
###thread字段
##执行进程切换
###switch_to宏
###__switch_to()函数

##保存和加载FPU,MMX及XMM寄存器
###保存FPU寄存器
###装载FPU寄存器
###在内核态使用FPU,MMX和SSE/SSE2单元


#创建进程
	传统操作：子进程复制父进程所拥有的的资源
	引入问题：传统方法效率低。-多数情况下子进程不适用父进程的资源，会调用execve(),清除父进程拷贝的地址空间。
	现代解决办法(3种机制)：1.写时复制；
						   2.轻量级进程，允许父子进程共享多数数据结构。
						   3.vofrk()系统调用创建的进程共享父进程地址空间。为防止父进程重写子进程数据，阻塞父进程直到
							子进程退出或执行一个新的程序。
##clone(),fork及vfork()系统调用
	clone()函数-作用：创建轻量级进程,实际是c语言库的封装函数
				输入：fn-新进程执行的函数。返回时，子进程终止。
					  arg-传递给fn()函数的数据
					  flags-低字节指定发送到父进程信号代码(一般是SIGCHLD)，剩余3字节给一clone标志组用于编码。
					  child_stack:用户态堆栈指针赋给子进程的esp。调用进程总是分配新的堆栈给子进程。
					  tls-线性局部存储段地址。为新轻量级进程定义，CLONE_SETTLS set才有意义。
					  ptid-父进程用户态变量地址。CLONE_PARENT_SETTID set才有意义。
					  ctid-新轻量级进程用户态变量地址。CLONE_CHILD_SETTID set才有意义。
	clone标志：
		CLONE_VM
		CLONE_FS
		CLONE_FILES
		CLONE_SIGHAND
		CLONE_PTRACE
		CLONE_VFORK
		CLONE_PARENT
		CLONE_THREAD 			子进程插入父进程同一线程组，子进程共享父进程信号描述符。
		CLONE_NEWNS
		CLONE_SYSVSEM
		CLONE_SETTLS
		CLONE_PARENT_SETTID
		CLONE_CHILD_CLEARTID
		CLONE_DETACHED
		CLONE_UNTRACED
		CLONE_CHILD_SETTID
		CLONE_STOPPED
	传统fork()函数同过clone实现：实现方法-需要把flags参数指定为SIGCHLD,且clone标志CLONE_VM和CLONE_VFORK。
								 完成后，父子进程暂时共享用户态堆栈。通过写时共享技术分离。
	vfork()函数同过clone实现：实现方法-需要把flags参数指定为SIGCHLD,且clone标志清0。
								 完成后，父子进程暂时共享用户态堆栈。通过写时共享技术分离。
###do_fork()函数
	处理clone(),fork及vfork()系统调用。
	流程：1.分配 新PID-通过 pidmap_array.
		  2.检查是否有其他程序跟踪父进程-通过current->ptrace
										 处理：通过独立程序查看是否也想跟踪子进程，如果子进程不是内核线程，
												则 SET CLONE_PTRACE
		  3.关键步骤 copy_process()-复制进程描述符，如果资源是可用的，返回描述符地址。
		  4.检查CLONE_STOPPED标志是否被设置。N 怎跳转到 step5。
		  5.检查。IF NOT SET CLONE_STOPPED,THEN wake_up_new_task(),操作如下：
			-调整父子进程调度参数
			-根据是否在同一CPU上或父子享受同一页表，决定子进程怎样插入队列
		  6.检查if CLONE_STOPPED THEN 子进程 TASK_STOPPED.
		  7.检查如果父进程被跟踪，操作子进程PID.
		  8.检查IF SET CLONE_VFORK, THEN 把父进程插入等待队列，挂起直到子进程释放。
		  9.结束，返回子进程ID.
			
								   
###copy_porcess()函数
	作用：创建 进程描述符 及子进程需要的其他数据结构。
	输入：同do_fork，外加子进程PID.
	步骤：1.检查 clone_flags 标志一致性。
			返回错误的情形：1) SET CLONE_NEWNS && SET CLONE_FS
							2) SET CLONE_THREAD && CLONE_SIGHAND =0 同一线程组轻量级进程必须共享信号
							3) SET CLONE_SIGHAND && CLONE_VM =0 共享信号处理程序的轻量级进程必须共享内存描述符
		  2.检查 附加安全性-通过 security_task_create() and security_task_alloc()。钩子函数
		  3.获取进程描述符-通过 dup_task_struct(),过程如下：
			1) 如需要 保存 FPU\MMX\SSE/SSE2 寄存器 ---> 父进程thread_info
			2) 为新进程获取 进程描述符。-通过alloc_task_struct()。描述符地址--->tsk。
			3) 获取内核栈和thread_info的空闲内存图-通过alloc_thread_info ,内存区地址--->ti。
			4) 填充进程描述符内容-通过复制父进程描述符，然后 tsk->thread_info=ti。
			5) 填充 thread_info -将父进程的复制到ti指向地址。
			6) 设置新进程状态 - tsk-usage =2,表示进程描述符正在被使用且相应进程处于活动状态。
			7) 返回描述符指针tsk.
		  4.检查 current->signal->rlim[RLIMIT_NPROC].rlim_cur
		  5.递增计数器 tsk-user->__count tsk_user->processes.
		  6.检查进程数量是否超过最大值 max_threads 。总原则是内核栈占用空间不能超过物理地址 1/8，
									但可通过 /proc/sys/kernel/threads-max 修改
		  7.递增使用计数器-如果实现新进程的执行域和可执行函数 in 内核模块。
		  8.设置进程状态：1.tsk->lock_depth =-1.大内核计数。
						  2.tsk->did_exec=0,是execve()调用次数。
						  3.更新flags。
		  9.设置新PID.
		  10.检查 CLONE_PARENT_SETTID 。
		  11.初始化list_head,自旋锁、挂起信号、定时器、时间统计表。
		  12.复制父进程数据到新进程数据结构中。除非clone_flags
			copy_semundo(),copy_files(),copy_fs(),copy_sighand(),copy_signal(),copy_mm(),copy_namespace().
		  13.初始化子进程内核栈。-调用copy_thread(),使用clone时CPU寄存器的值。
									例外：eax《-0，thread.esp=子进程内核栈基地址。
		  14.检查 CLONE_CHILD_CLEARTID或CLONE_CHILD_SETTID标志。
		  15.清除 TIF_SYSCALL_TRACE 标志，使 系统调用结束消息不会发给调试进程。
		  16.初始化tsk->exit_signal :根据CLONE_FLAGS低位。
				IF SET CLONE_THREAD THEN  tsk->exit_signal=-1;
				只有线程组最后一个成员死亡（通常是线程组领头），才会通知线程组领头进程的父进程。
		  17.初始化新进程调度程序数据结构-sched_fork():设置 TASK_RUNNING;
														preempt_count = 1,禁止抢占
														该函数在父子进程间共享父进程时间片
		  18.设置新进程thread_info的cpu号-smp_processor_id。
		  19.初始化亲子关系字段。
		  20.检查 CLONE_PTRACE 字段。
		  21.新进程描述符插入链表-SET_LINK
		  22.检查子进程是否必须跟踪情况。如果是，插入到跟踪列表。
		  23.将PID插入 pidhash[PIDTYPE_PID]散列表。
		  24.检查子进程是否是领头进程（CLONE_THREAD ==0）:
				tsk->tgid = tsk->pid
				tsk->group_leader =tsk
				插入子进程到3个不同类型散列表：attach_pid(),PIDTYPE_TGID,PIDTYPE_PGID,PIDTYPE_SID。
			elseif CLONE_THREAD ==1   子进程是父进程线程组
			    tsk->tgid = tsk->current->pid
				tsk->group_leader =current->group_leader
				插子进程到散列表：attach_pid(),PIDTYPE_TGID。
		  26.递增计数器。
		  27.返回子进程描述符指针tsk。
	do_fork()后续动作：1.装载CPU寄存器，用thread字段。
					   2.强迫CPU回到用户态。
					   3.系统调用结束后，新进程开始执行。
							
##内核线程
###创建一个内核线程
	kernel_thread()函数-输入：fn,arg,flags.
						执行：调用 do_fork(flags|CLONE_VM|CLONE_UNTRACED,0,pregs,0,NULL,NULL)
								CLONE_VM|CLONE_UNTRACED避免复制调用进程的页表，不被调用进程跟踪
								pregs-内核栈地址。
###进程0
	idle进程 or swapper进程，是一个内核线程，使用下列静态分配的数据结构（其他是动态）：
		1)进程描述符-在init_task中，由INIT_TASK完成初始化；
		2)内核态堆栈和thread_info-IN init_thread_union,由INIT_THREAD_INFO初始化
		3)进程描述符的下列表：mm,fs,file,sig,sighand，也由宏初始化。
		4)主内核页全局目录 IN swpper_pg_dir
	1.start_kernel()初始化内核所需要的所有数据结构，激活中断，创建进程1：
		kernel_thread(init,NULL,CLONE_FS|CLONE_SIGHAND)
	2.执行cpu_idle()函数，在没有可运行进程时，才执行进程0.
	
	每个CPU都有一个进程0.
###进程1
	1.内核态执行init(),init依次完成内核初始化。
	2.调用execve()装入init，此时编程一个普通进程，拥有每进程内核数据结构。
	作用：创建和监控操作系统 外层执行的所有进程的活动。
###其他内核线程
	keventd
	kapmd
	kswapd
	pdflush
	kblocked
	ksoftirqd

#撤销进程
	中止方式：
		1.编程者调用exit(),通知内核释放进程所拥有的的资源。
		2.内核强迫整个线程组死掉，基于以下2种情况：1)进程收到信号;2)内核代表进程运行时，遇到不可恢复异常。
##进程终止
	1.exit_group()-封装在库函数exit()中。对应内核函数 do_group_exit
	2.exit()-封装在pthread_exit()这类 库函数中。对应内核函数 do_exit()
###do_group_exit()函数
	最终调用do_exit()函数。
###do_exit()函数
	1.设置flag=PF_EXITING.
	2.删除进程描述符 从动态定时器队列 del_timer_sync()
	3.从进程描述符中分理除大部分数据结构，exit_mm,exit_sem,,__exit_files等，如果没有其他进程共享，则删除。
	4.IF 执行域和可执行格式 THEN 递减计数器
	5.把描述符exit_code字段设置成进程终止代号。
	6.exit_notify():
		1)更新父进程与子进程亲属关系。IF 同一进程组由正在运行进程 THEN 子进程成为同一线性组另一进程的子进程
										ELSE 成为init子进程
		2)如果没有其他的“兄弟”，就向父进程发送SIGCHLD通知父进程死亡。
									-条件：exit_signal=1，是所属进程组最后一个成员。
		3)exit_signal=1 or 是所属进程组还有其他成员；只要进程被跟踪 就向父进程发送SIGCHLD通知父进程死亡。
		4)exit_signal =-1,且未被跟踪。-> exit_state = EXIT_DEAD.
										 release_task 回收其他进程占用内存。使进程描述符使用计数器为1，描述符
														刚好不会释放
		5)exit_signal != -1 or 正被跟踪。exit_state = EXIT_ZOMBIE
		6)flags=PF_DEAD
	7.调用schedule()函数选择新进程执行。调度程序忽略处于EXIT_ZOMBIE状态进程。
	  在schedule()中，if(prev->flags & PF_DEAD) prev->state = EXIT_DEAD；从运行队列中删除。
	

##进程删除