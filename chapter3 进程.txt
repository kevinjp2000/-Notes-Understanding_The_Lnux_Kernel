#进程、轻量级进程和线程
#进程描述符
##进程状态
##标识一个进程
###进程描述符处理
###标识当前进程
###双向链表
###进程链表
###TASK_RUNNING状态的进程链表

##进程间的关系
###pidhash表及链表

##如何组织进程
###等待队列
###等待队列的操作


##进程资源限制

#进程切换
##硬件上下文
##任务状态段
###thread字段
##执行进程切换
###switch_to宏
###__switch_to()函数

##保存和加载FPU,MMX及XMM寄存器
###保存FPU寄存器
###装载FPU寄存器
###在内核态使用FPU,MMX和SSE/SSE2单元


#创建进程
	传统操作：子进程复制父进程所拥有的的资源
	引入问题：传统方法效率低。-多数情况下子进程不适用父进程的资源，会调用execve(),清除父进程拷贝的地址空间。
	现代解决办法(3种机制)：1.写时复制；
						   2.轻量级进程，允许父子进程共享多数数据结构。
						   3.vofrk()系统调用创建的进程共享父进程地址空间。为防止父进程重写子进程数据，阻塞父进程直到
							子进程退出或执行一个新的程序。
##clone(),fork及vfork()系统调用
	clone()函数-作用：创建轻量级进程,实际是c语言库的封装函数
				输入：fn-新进程执行的函数。返回时，子进程终止。
					  arg-传递给fn()函数的数据
					  flags-低字节指定发送到父进程信号代码(一般是SIGCHLD)，剩余3字节给一clone标志组用于编码。
					  child_stack:用户态堆栈指针赋给子进程的esp。调用进程总是分配新的堆栈给子进程。
					  tls-线性局部存储段地址。为新轻量级进程定义，CLONE_SETTLS set才有意义。
					  ptid-父进程用户态变量地址。CLONE_PARENT_SETTID set才有意义。
					  ctid-新轻量级进程用户态变量地址。CLONE_CHILD_SETTID set才有意义。
	clone标志：
		CLONE_VM
		CLONE_FS
		CLONE_FILES
		CLONE_SIGHAND
		CLONE_PTRACE
		CLONE_VFORK
		CLONE_PARENT
		CLONE_THREAD
		CLONE_NEWNS
		CLONE_SYSVSEM
		CLONE_SETTLS
		CLONE_PARENT_SETTID
		CLONE_CHILD_CLEARTID
		CLONE_DETACHED
		CLONE_UNTRACED
		CLONE_CHILD_SETTID
		CLONE_STOPPED
	传统fork()函数同过clone实现：实现方法-需要把flags参数指定为SIGCHLD,且clone标志CLONE_VM和CLONE_VFORK。
								 完成后，父子进程暂时共享用户态堆栈。通过写时共享技术分离。
	vfork()函数同过clone实现：实现方法-需要把flags参数指定为SIGCHLD,且clone标志清0。
								 完成后，父子进程暂时共享用户态堆栈。通过写时共享技术分离。
###do_fork()函数
	处理clone(),fork及vfork()系统调用。
	流程：1.分配 新PID-通过 pidmap_array.
		  2.检查是否有其他程序跟踪父进程-通过current->ptrace
										 处理：通过独立程序查看是否也想跟踪子进程，如果子进程不是内核线程，
												则 SET CLONE_PTRACE
		  3.关键步骤 copy_process()-复制进程描述符，如果资源是可用的，返回描述符地址。
		  4.检查CLONE_STOPPED标志是否被设置。N 怎跳转到 step5。
		  5.检查。IF NOT SET CLONE_STOPPED,THEN wake_up_new_task(),操作如下：
			-调整父子进程调度参数
			-根据是否在同一CPU上或父子享受同一页表，决定子进程怎样插入队列
		  6.检查if CLONE_STOPPED THEN 子进程 TASK_STOPPED.
		  7.检查如果父进程被跟踪，操作子进程PID.
		  8.检查IF SET CLONE_VFORK, THEN 把父进程插入等待队列，挂起直到子进程释放。
		  9.结束，返回子进程ID.
			
								   
###copy_porcess()函数

##内核线程
###创建一个内核线程
###进程0
###进程1
###其他内核线程


#撤销进程
##进程终止
###do_group_exit()函数
###do_exit()函数

##进程删除