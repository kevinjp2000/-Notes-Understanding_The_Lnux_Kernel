#内核如何为不同的请求提供服务
	内核可看做不断相应请求的服务器，请求来自进程 或者 I/O设备中断请求。这些请求引起竞争条件。
	中断、异常（包括系统调用）的服务策略：
		1.中断请求时，内核空闲，则开始为中断服务。
		2.执行异常处理程序时，出现中断，则挂起异常，处理中断。
		3.执行中断处理程序时，出现第二个中断，则挂起第一个中断，处理第二个中断后，返回第一个中断。
		4.中断处理可能要求内核停止当前异常的处理，那么完成中断处理后，内核会挂起旧异常，处理新的异常。
##内核抢占
	内核抢占定义（近似）：进程正在内核态执行时，允许内核切换（切换到另一进程的内核态）。
	特点：一个在内核态运行的进程可能在执行内核函数时被另一个进程取代。	
	preempt_enable()-递减抢占计数器
					 如果TIF_NEED_RESCHED=1 ,preempt_schedule()
##什么时候同步是必须的
	临界区:一段代码，其他内核控制路径进入这段代码前，当前的路径必须完全执行完此段代码。
	临界区确定后，必须加以保护确保只有一个内核路径进入。
	确定临界区标准，举例：1.不同中断程序访问同一数据结构，任何影响数据结构的操作都要放入临界区。
##什么时候同步是不必要的
	已有的简化同步的设计：1.中断处理结束前，不产生相同的中断；
						  2.中断处理程序、软中断和tasklet既不可以被抢占也不能阻塞。只有轻微的延迟(被其他中断打断)
						  3.中断不会被可延迟函数和系统调用打断。
						  4.软中断和tasklet不能再一个给定的CPU上交错执行。
						  5.同一个tasklet不能再几个CPU上执行。
	内核应用简化的例子：1.中断处理程序和tasklet可以写成不可重入函数。
						2.只被软中断和tasklet访问的每CPU变量不许同步
						3.仅被一种tasklet访问的数据结构不需同步

#同步原语


##每CPU变量
##原子操作
	若干指令具有“读-修改-写”类型。
##优化和内存屏障
##自旋锁
	自旋锁保护的临界区一般是禁止内核抢占的。例外：忙等时可以被抢占。
	
###具有内核抢占的spin_lock宏
###非抢占式内核中的spin_lock宏
###spin_unlock宏
##读/写自旋锁
###为读 获取和释放一个锁
###为写 获取和释放一个锁
##顺序锁
##读-拷贝-更新（RCU）
##信号量
	睡眠函数才能获得内核信号量；中断处理和可延迟函数不能使用内核信号量。
	进程获取信号量保护的忙资源时，相应进程被挂起。资源被释放后，进程再次变为可运行。
###获取和释放信号量
###读写信号量
###补充原语
##禁止本地中断
##禁止和激活可延迟函数
#对内核数据结构的同步访问
##在自旋锁、信号量和中断禁止之间的选择
###保护异常所访问的数据结构
###保护中断所访问的数据结构
###保护可延迟函数所访问的数据结构
###保护由异常和中断所访问的数据结构
	可延迟函数本质上由中断的出现激活。
	可延迟函数执行时不可能产生异常。
###保护由异常和可延迟函数所访问的数据结构
###保护由中断和可延迟函数所访问的数据结构
#避免竞争条件的实例
##引用计数器
##大内核锁
##内存描述符读/写信号量
##slab高速缓存链表的信号量
##索引节点的信号量
